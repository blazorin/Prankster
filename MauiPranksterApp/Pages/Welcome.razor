@page "/"
@using System.IO
@using Native.iOS
@using global::Shared.Utils
@using Microsoft.Maui.Essentials 
@using Blazored.LocalStorage
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider;

<AuthorizeView>
    <Authorized>@NavigateToHome()</Authorized>
    <NotAuthorized>    
    <div class="dz-container dz-p0">

        <div class="dz-screen dz-screen1" data-img="assets/images/background.png">
            <div class="dz-screen-content">

                <h2>Your cryptocurrency application</h2>
                <p>Use commercial free photos from Unsplash or Pexels to fill the launch screen background with related images</p>

                <div class="dz-flex-style" style="align-items: center">
                    <button style="background: var(--grey5);">Review Terms</button> 
                    <button class="dz-active" @onclick="Auth">
                        <div style="@(_isDoingAuth ? "font-size: 0" : string.Empty)">Agree and Continue</div>
                        @{ if (_isDoingAuth) 
                            {
                                <ButtonLoader />
                            }
                         }
                    </button>
                </div>

            </div>
        </div>

    </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    bool _isDoingAuth;

    string NavigateToHome()
    {
        _navigationManager.NavigateTo("home");

        return string.Empty;
    }

    async Task Auth()
    {
        if (_isDoingAuth)
            return;

        _isDoingAuth = true;
        StateHasChanged();

        //string identifier = KeyChain.ValueForKey("simpleidentifier");
        await Task.Delay(100);
        //string pin = KeyChain.ValueForKey("pin");
        string identifier = null;
        string pin = null;

        bool acceptNew = string.IsNullOrEmpty(identifier) && string.IsNullOrEmpty(pin);

        await Task.Delay(1500);
        await ((CustomAuthenticationStateProvider)_authStateProvider).SendAuthenticationRequest(acceptNew, true);
        await Task.Delay(1500);
        // 3s loading delay

        _isDoingAuth = false;
    }


}